<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="mapper.packageProduct">
	<insert id="insertPackageProduct" parameterType="packageProduct" useGeneratedKeys="true" keyProperty="packageNum">
		insert into package (sellerNum, cateNum, packageName, content, packagePrice, stock, startDate, endDate, packageUnit, imgUrl) 
		values (#{sellerNum}, #{cateNum}, #{packageName}, #{content}, #{packagePrice}, #{stock}, #{startDate}, #{endDate}, #{packageUnit}, #{imgUrl})
	</insert>
	<select id="selectPackageProduct" parameterType="Long" resultType="packageProduct">
		select * from package where packageNum=#{packageNum}
	</select> 
	<update id="updatePackageProduct" parameterType="packageProduct">
		update package set cateNum=#{cateNum}, packageName=#{packageName}, content=#{content}, packagePrice=#{packagePrice}, stock=#{stock}, startDate=#{startDate}, endDate=#{endDate}, packageUnit=#{packageUnit}, updatedAt=#{updatedAt}, imgUrl=#{imgUrl} where packageNum=#{packageNum}
	</update>
	<select id="selectDetailPackage" parameterType="long" resultType="PackageVO">
		SELECT 
		    p.packageNum, 
		    p.sellerNum, 
		    s.storeName,                       
		    p.packageName, 
		    p.packageprice, 
		    p.imgUrl,
		    p.content,
		    IFNULL(ROUND(AVG(r.pkRating), 1), 0) AS avgRating,
		    COUNT(r.pkreviewNum) AS reviewCount
		FROM package p
		JOIN sellerDetail s ON p.sellerNum = s.sellerNum
		LEFT JOIN packreview r ON p.packageNum = r.packageNum
		WHERE p.packageNum = #{packageNum}
	</select>
	<select id="selectPackageByCategory" resultType="PackageVO" parameterType="map">
	  SELECT 
	    p.packageNum, p.packageName, p.packageprice, p.imgUrl, p.salesVolume,
	    s.storeName, p.startDate,
	    IFNULL(ROUND(AVG(r.pkRating), 1), 0) AS avgRating,
	    COUNT(r.pkreviewNum) AS reviewCount
	  FROM package p
	  JOIN sellerDetail s ON p.sellerNum = s.sellerNum
	  LEFT JOIN packreview r ON p.packageNum = r.packageNum
	  WHERE p.cateNum = #{cateNum}
	  GROUP BY p.packageNum
	
	  <choose>
	    <when test="sort == 'createdAt'">
	      ORDER BY p.createdAt DESC, p.packageName ASC
	    </when>
	    <when test="sort == 'priceAsc'">
	      ORDER BY p.packageprice ASC, p.packageName ASC
	    </when>
	    <when test="sort == 'priceDesc'">
	      ORDER BY p.packageprice DESC, p.packageName ASC
	    </when>
	    <otherwise>
	      ORDER BY p.packageName DESC,  IFNULL(ROUND(AVG(r.pkRating), 1), 0)
	    </otherwise>
	  </choose>
	
	  LIMIT #{start}, #{pageSize}
	</select>
	<select id="countPackageByCategory" resultType="Integer">
	    SELECT COUNT(*) FROM package WHERE cateNum = #{cateNum}
	</select>
	<!-- package List -->
	<resultMap id="packageWithOptionResultMap" type="PackageVO">
	    <id property="packageNum" column="packageNum"/>
	    <result property="sellerNum" column="sellerNum"/>
	    <result property="packageName" column="packageName"/>
	    <result property="pkStatus" column="pkStatus"/>
	    <result property="packagePrice" column="packagePrice"/>
	    <result property="imgUrl" column="imgUrl"/>
	    <result property="createdAt" column="createdAt"/>
	    <result property="salesVolume" column="salesVolume"/>
	    <result property="avgRating" column="avgRating"/>
	    <result property="reviewCount" column="reviewCount"/>
	</resultMap>
	<select id="selectPackageList" parameterType="map" resultMap="packageWithOptionResultMap">
		select p.packageNum, p.sellerNum, p.packageName,p.packageUnit, p.stock, p.startDate, p.endDate,
			p.packagePrice, p.imgUrl, p.createdAt, p.updatedAt, p.salesVolume,
			c.name as cateName, IFNULL(ROUND(pr.avgRating, 1), 0) AS avgRating, COALESCE(pr.reviewCount, 0) as reviewCount,
			CASE 
		        WHEN p.endDate >= CURDATE() THEN '판매 중'
		        ELSE '판매 종료'
		    	END AS sellStatus
		from package p
		join category c on p.cateNum = c.cateNum
		left join (
			select packageNum,AVG(pkRating) as avgRating, COUNT(*) as reviewCount
			from packReview
			group by packageNum		
		)pr on p.packageNum = pr.packageNum
		where p.sellerNum = #{sellerNum}
		<if test="sellStat != null and sellStat != ''">
			<choose>
				<when test="sellStat == 'sales'">
					AND p.endDate >= CURDATE()
				</when>
				<when test="sellStat == 'salesStop'">
					AND p.endDate &lt; CURDATE()
				</when>
			</choose>
		</if>
		<choose>
	        <when test="sort == 'lowPrice'">order by p.packagePrice asc</when>
	        <when test="sort == 'highPrice'">order by p.packagePrice desc</when>
	        <when test="sort == 'sales'">order by p.salesVolume desc</when>
	        <when test="sort == 'reviewCount'">order by pr.reviewCount desc</when>
	        <when test="sort == 'rating'">order by pr.avgRating desc</when>
        	<otherwise>order by p.createdAt desc</otherwise> <!-- 기본값: 최신순 -->
   		</choose>
    	limit #{offset}, #{pageSize}
	</select>
	<select id="countPackageList" parameterType="map" resultType="Integer">
		select count(*)
		from package
		where sellerNum=#{sellerNum}
		<if test="sellStat != null and sellStat!= ''">
			<choose>
				<when test="sellStat == 'sales'">
					and status = true
				</when>
				<when test="sellStat == 'salesStop'">
					and status = false
				</when>
			</choose>
		</if>
	</select>
	<update id="updatePackageStock" parameterType="map">
		update package set stock = #{stock}
		where packageNum = #{packageNum}
	</update>
	
	<!-- package Sub List -->
	 <select id="selectPackSubList" parameterType="map" resultType="packSubVO">
    SELECT ps.*, p.packageName, p.imgUrl, p.packagePrice, p.packageUnit, p.endDate
    FROM pakagesubscribe ps
    JOIN package p ON ps.packageNum = p.packageNum
    WHERE ps.userNum = #{userNum}
    <if test="startDate != null and startDate != ''">
      AND ps.subStartDate &gt;= #{startDate}
    </if>
    <if test="endDate != null and endDate != ''">
      AND ps.subEndDate &lt;= #{endDate}
    </if>
    <if test="deliveryStatus != null and deliveryStatus != ''">
      AND ps.isSub = 
        <choose>
          <when test="deliveryStatus == '구독중'">1</when>
          <when test="deliveryStatus == '구독종료'">0</when>
          <when test="deliveryStatus == '구독취소'">0</when>
        </choose>
    </if>
    ORDER BY ps.subStartDate DESC
    LIMIT #{offset}, #{pageSize}
  </select>

  <select id="selectPackSubCount" parameterType="map" resultType="Integer">
    SELECT COUNT(*)
    FROM pakagesubscribe ps
    JOIN package p ON ps.packageNum = p.packageNum
    WHERE ps.userNum = #{userNum}
    <if test="startDate != null and startDate != ''">
      AND ps.subStartDate &gt;= #{startDate}
    </if>
    <if test="endDate != null and endDate != ''">
      AND ps.subEndDate &lt;= #{endDate}
    </if>
    <if test="deliveryStatus != null and deliveryStatus != ''">
      AND ps.isSub = 
        <choose>
          <when test="deliveryStatus == '구독중'">1</when>
          <when test="deliveryStatus == '구독종료'">0</when>
          <when test="deliveryStatus == '구독취소'">0</when>
        </choose>
    </if>
  </select>
	
	<select id="selectPackageByAll" resultType="PackageVO" parameterType="map">
	  SELECT 
	    p.packageNum, p.packageName, p.packageprice, p.imgUrl, p.salesVolume,
	    s.storeName, p.startDate,
	    IFNULL(ROUND(AVG(r.pkRating), 1), 0) AS avgRating,
	    COUNT(r.pkreviewNum) AS reviewCount
	  FROM package p
	  JOIN sellerDetail s ON p.sellerNum = s.sellerNum
	  LEFT JOIN packreview r ON p.packageNum = r.packageNum
	  GROUP BY p.packageNum
	
	  <choose>
	    <when test="sort == 'createdAt'">
	      ORDER BY p.createdAt DESC, p.packageName ASC
	    </when>
	    <when test="sort == 'priceAsc'">
	      ORDER BY p.packageprice ASC, p.packageName ASC
	    </when>
	    <when test="sort == 'priceDesc'">
	      ORDER BY p.packageprice DESC, p.packageName ASC
	    </when>
	    <otherwise>
	      ORDER BY p.packageName DESC,  IFNULL(ROUND(AVG(r.pkRating), 1), 0) 
	    </otherwise>
	  </choose>
	
	  LIMIT #{start}, #{pageSize}
	</select>
	<select id="countPackageByAll" resultType="Integer">
	    SELECT COUNT(*) FROM package
	</select>
	<update id="adjustStock" parameterType="map">
		UPDATE package SET stock = stock + #{quantityDiff} WHERE packageNum = #{packageNum} AND stock > 0
	</update>
	<update id="adjustSalesVolume" parameterType="map">
		UPDATE package SET salesVolume = salesVolume + #{quantityDiff} WHERE packageNum = #{packageNum}
	</update>
</mapper>
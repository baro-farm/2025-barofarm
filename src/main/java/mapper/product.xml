<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="mapper.product">
	<insert id="insertProduct" parameterType="product" useGeneratedKeys="true" keyProperty="productNum">
		insert into product (sellerNum, cateNum, productName, content, stock, price, imgUrl, status) 
		values (#{sellerNum}, #{cateNum}, #{productName}, #{content}, #{stock}, #{price}, #{imgUrl}, #{status})
	</insert>
	<select id="selectProduct" parameterType="Long" resultType="product">
		select * from product where productNum=#{productNum}
	</select>
	<update id="updateProduct" parameterType="product">
		update product set cateNum=#{cateNum}, productName=#{productName}, content=#{content}, 
		stock=#{stock}, price=#{price}, imgUrl=#{imgUrl}, status=#{status} where productNum=#{productNum} 
	</update>
	<update id="stopProduct" parameterType="product">
		update product set status=#{status} where productNum=#{productNum}
	</update>
	<insert id="insertProductOption" parameterType="productOption">
		insert into productOption (productNum, option, price) values (#{productNum}, #{option}, #{price})
	</insert>
	<select id="selectProductOption" parameterType="Long" resultType="productOption">
		select * from productOption where productNum=#{productNum}
	</select>
	<update id="updateProductOption" parameterType="productOption">
		update productOption set option=#{option}, price=#{price}, updatedAt=#{updatedAt} where optionNum=#{optionNum}
	</update>
	
	<!-- product List -->
	<select id="selectProductList" parameterType="long" resultType="productVo">
		select p.productNum, p.sellerNum, p.productName,p.status, 
		p.stock, p.price, p.imgUrl, p.createdAt, p.salesVolume,
		c.name as cateName, COALESCE(AVG(r.pdRating), 0) AS avgRating
		from product p
		join category c on p.cateNum = c.cateNum
		left join prodreview r on p.productNum = r.productNum
		where p.sellerNum = #{sellerNum}
		group by p.productNum
	</select>
	
	<update id="updateProductStock" parameterType="map">
		update product set stock = #{stock}
		where productNum = #{productNum}
	</update>
	
	<update id="updateProductStatusBatch" parameterType="list">
	 	UPDATE product
	    SET status = CASE productNum
	        <foreach collection="list" item="item">
	            WHEN #{item.productNum} THEN #{item.status}
	        </foreach>
	    END
	    WHERE productNum IN
	    <foreach collection="list" item="item" open="(" separator="," close=")">
	        #{item.productNum}
	    </foreach>
	</update>
	
	
	<!-- end of Product List -->
	
	<delete id="deleteProductOption" parameterType="Long">
		delete from productOption where optionNum=#{optionNum}
	</delete>

	<select id="selectProductByCategory" resultType="ProductVO" parameterType="map">
	  SELECT 
	    p.productNum, p.productName, p.price, p.imgUrl, p.salesVolume,
	    s.storeName,
	    IFNULL(ROUND(AVG(r.pdRating), 1), 0) AS avgRating,
	    COUNT(r.reviewNum) AS reviewCount
	  FROM product p
	  JOIN sellerDetail s ON p.sellerNum = s.sellerNum
	  LEFT JOIN prodreview r ON p.productNum = r.productNum
	  WHERE p.cateNum = #{cateNum}
	  GROUP BY p.productNum
	
	  <choose>
	    <when test="sort == 'createdAt'">
	      ORDER BY p.createdAt DESC, p.productName ASC
	    </when>
	    <when test="sort == 'priceAsc'">
	      ORDER BY p.price ASC, p.productName ASC
	    </when>
	    <when test="sort == 'priceDesc'">
	      ORDER BY p.price DESC, p.productName ASC
	    </when>
	    <otherwise>
	      ORDER BY p.productName DESC
	    </otherwise>
	  </choose>
	
	  LIMIT #{start}, #{pageSize}
	</select>
	<select id="countProductByCategory" resultType="Integer">
	    SELECT COUNT(*) FROM product WHERE cateNum = #{cateNum}
	</select>
	<select id="selectBest5" resultType="ProductVO">
		SELECT 
			p.productNum, p.productName, p.price, p.imgUrl, p.salesVolume,
			s.storeName,
			IFNULL(ROUND(AVG(r.pdRating), 1), 0) AS avgRating,
			COUNT(r.reviewNum) AS reviewCount
		FROM product p
		JOIN sellerDetail s ON p.sellerNum = s.sellerNum
		LEFT JOIN prodreview r ON p.productNum = r.productNum
		GROUP BY p.productNum
		ORDER BY p.salesVolume DESC, productName ASC
		LIMIT 5
	</select>
	<select id="selectNew5" resultType="ProductVO">
		SELECT 
			p.productNum, p.productName, p.price, p.imgUrl, p.salesVolume,
			s.storeName,
			IFNULL(ROUND(AVG(r.pdRating), 1), 0) AS avgRating,
			COUNT(r.reviewNum) AS reviewCount,
			p.createdAt
		FROM product p
		JOIN sellerDetail s ON p.sellerNum = s.sellerNum
		LEFT JOIN prodreview r ON p.productNum = r.productNum
		GROUP BY p.productNum
		ORDER BY p.createdAt DESC, productName ASC
		LIMIT 5
	</select>
	<select id="selectBestProductsByPage" resultType="ProductVO">
	    SELECT 
	        p.productNum, p.productName, p.price, p.imgUrl, p.salesVolume,
	        s.storeName,
	        IFNULL(ROUND(AVG(r.pdRating), 1), 0) AS avgRating,
	        COUNT(r.reviewNum) AS reviewCount
	    FROM product p
	    JOIN sellerDetail s ON p.sellerNum = s.sellerNum
	    LEFT JOIN prodreview r ON p.productNum = r.productNum
	    GROUP BY p.productNum
	    ORDER BY p.salesVolume DESC, productName ASC
	    LIMIT 100
	</select>
	<select id="selectNewProductsByPage" resultType="ProductVO">
	    SELECT 
	        p.productNum, p.productName, p.price, p.imgUrl, p.salesVolume,
	        s.storeName,
	        IFNULL(ROUND(AVG(r.pdRating), 1), 0) AS avgRating,
	        COUNT(r.reviewNum) AS reviewCount
	    FROM product p
	    JOIN sellerDetail s ON p.sellerNum = s.sellerNum
	    LEFT JOIN prodreview r ON p.productNum = r.productNum
	    GROUP BY p.productNum
	    ORDER BY p.createdAt DESC, productName ASC
	    LIMIT 100
	</select>
	<select id="searchProduct" resultType="ProductVO" parameterType="map">
		SELECT p.productNum, p.productName, p.price, p.imgUrl, p.salesVolume,
	    s.storeName,
	    IFNULL(ROUND(AVG(r.pdRating), 1), 0) AS avgRating,
	    COUNT(r.reviewNum) AS reviewCount
	  	FROM product p
	  	JOIN sellerDetail s ON p.sellerNum = s.sellerNum
	  	LEFT JOIN prodreview r ON p.productNum = r.productNum
	  	WHERE p.productName LIKE CONCAT('%', #{keyword}, '%')
	  	GROUP BY p.productNum
	  	<choose>
		  	<when test="sort == 'createdAt'">
		    	ORDER BY p.createdAt DESC, p.productName ASC
		  	</when>
		  	<when test="sort == 'priceAsc'">
		    	ORDER BY p.price ASC, p.productName ASC
		  	</when>
		  	<when test="sort == 'priceDesc'">
		    	ORDER BY p.price DESC, p.productName ASC
		  	</when>
		  	<otherwise>
		    	ORDER BY p.salesVolume DESC, p.productName ASC
		  	</otherwise>
	  	</choose>
	  	LIMIT #{start}, #{pageSize}
	</select>
	<select id="countProductsByKeyword" resultType="Integer" parameterType="String">
	    SELECT COUNT(*) 
	    FROM product
	    WHERE productName LIKE CONCAT('%', #{keyword}, '%')
	</select>
	<select id="selectDetailProduct" parameterType="long" resultType="productVo">
		SELECT 
		    p.productNum, 
		    p.sellerNum, 
		    s.storeName,                       
		    p.productName, 
		    p.price, 
		    p.imgUrl,
		    IFNULL(ROUND(AVG(r.pdRating), 1), 0) AS avgRating, 
		    COUNT(r.reviewNum) AS reviewCount,
		    po.option, 
		    po.price AS optionPrice            
		FROM product p
		JOIN sellerDetail s ON p.sellerNum = s.sellerNum   
		LEFT JOIN prodreview r ON p.productNum = r.productNum
		WHERE p.productNum = #{productNum}
	</select>
	<select id="selectProductOptions" parameterType="long" resultType="vo.ProductOptionVO">
	    SELECT 
	        optionNum,
	        option, 
	        price AS optionPrice
	    FROM productoption
	    WHERE productNum = #{productNum}
	</select>
	
</mapper>